---
import LangSelect from "./LangSelect.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
const home = getRelativeLocaleUrl("fr", "/");
---

<nav class="nav-main">
  <div class="grid contenido">
    <div id="menu">
      <div class="logo">Aqui el logo</div>
      
      <button class="hamburger" aria-label="Menu">
        <span></span>
        <span></span>
        <span></span>
      </button>

      <div class="nav-content">
        <ul>
          <li>
            <a href={home}>Home</a>
          </li>
          <li>
            <a href="/about">About</a>
          </li>
          <li>
            <a href="/contact">Contact</a>
          </li>
        </ul>
        <div class="selector">
          <LangSelect />
        </div>
      </div>
    </div>
  </div>
</nav>
<div id="margenNav"></div>

<style lang="scss">
  @use '../styles/variables.scss' as *;
  #margenNav {
    margin-bottom: 2rem;
    @include cel {
      margin-bottom: 5rem;
    }
  }
  
  .nav-main {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: #f8f9fa;
    padding: 1rem 0;
    transition: transform 0.3s ease;
    z-index: 1000;
  }

  #menu {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    position: relative;
  }

  .logo {
    z-index: 2;
  }

  .nav-content {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  ul {
    list-style: none;
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
    li {
      list-style: none;
    }
  }

  nav a {
    text-decoration: none;
    color: #333;
    font-weight: bold;
    transition: color 0.3s ease;
    
    &:hover {
      color: #0066cc;
    }
  }

  .hamburger {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    z-index: 2;
    position: relative;
    right: 20px;

    span {
      display: block;
      width: 28px;
      height: 2px;
      background-color: $acento;
      margin: 5px 0;
      transition: all 0.3s ease;
      border-radius: 3px;
    }
  }

  @include cel {
    .hamburger {
      display: block;
    
    }

    #menu {
      .nav-content {
        position: fixed;
        top: 0;
        right: -100%;
        width: 100%;
        height: 100vh;
        background-color: #f8f9fa;
        flex-direction: column;
        justify-content: center;
        padding: 2rem;
        transition: right 0.5s ease;

        &.active {
          right: 0;
        }
      }
    }

    ul {
      flex-direction: column;
      align-items: center;
      width: 100%;
      
      li {
        width: 100%;
        text-align: center;
      }
      
      a {
        display: block;
        padding: 1rem 0;
        border-bottom: 1px solid #eee;
      }
    }

    .selector {
      margin-top: 2rem;
    }

    // Hamburger animation
    .hamburger.active {
      span {
        &:first-child {
          transform: rotate(45deg) translate(5px, 5px);
          background-color: $primario;
        }
        &:nth-child(2) {
          opacity: 0;
        }
        &:last-child {
          transform: rotate(-45deg) translate(5px, -5px);
          background-color: $primario;
        }
      }
    }
  }
</style>

<script>
  // Variables
  let lastScroll = 0;
  const nav = document.querySelector('.nav-main');
  const hamburger = document.querySelector('.hamburger');
  const navContent = document.querySelector('.nav-content');
  const menuLinks = document.querySelectorAll('#menu a');

  // Toggle menu
  function toggleMenu() {
    hamburger?.classList.toggle('active');
    navContent?.classList.toggle('active');
    document.body.style.overflow = navContent?.classList.contains('active') ? 'hidden' : '';
  }

  // Hide/Show nav on scroll
  function handleScroll() {
    const currentScroll = window.scrollY;
    
    if (currentScroll > lastScroll && currentScroll > 100) {
      // Scrolling down - hide nav
      (nav as HTMLElement)?.style.setProperty('transform', 'translateY(-100%)');
    } else {
      // Scrolling up - show nav
      (nav as HTMLElement)?.style.setProperty('transform', 'translateY(0)');
    }
    
    lastScroll = currentScroll;
  }

  // Event Listeners
  hamburger?.addEventListener('click', toggleMenu);

  // Close menu when clicking a link
  menuLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (navContent?.classList.contains('active')) {
        toggleMenu();
      }
    });
  });

  // Throttle scroll event
  let ticking = false;
  window.addEventListener('scroll', () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        handleScroll();
        ticking = false;
      });
      ticking = true;
    }
  });
</script>
</style>
