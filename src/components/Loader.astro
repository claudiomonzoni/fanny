---
interface Props {
  /** Duration of the loading animation in milliseconds */
  duration?: number;
  /** Text to display inside the loader */
  loadingText?: string;
}

const { 
  duration = 3000, 
  loadingText = 'Loading...' 
} = Astro.props;

// El loader se renderizará inicialmente pero se ocultará mediante JS si todo está en caché

---

<div class="loader-wrapper">
  <div class="loader-container">
    <div class="loader">
      <div class="loader-progress">
        <div class="loader-progress-bar"></div>
      </div>
      <div class="loader-percentage" aria-live="polite">0%</div>
    </div>
    {loadingText && <p class="loader-text">{loadingText}</p>}
  </div>
</div>

<style lang="scss">
  @use '../styles/variables.scss' as *;
  $duration: 3000;

  .loader-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    display: grid;
    place-items: center;
    background-color: $primario;
    z-index: 9999;
    backdrop-filter: blur(5px);
    transition: opacity 0.5s ease-out, visibility 0.5s ease-out;
  }

  .loader-container {
    text-align: center;
    
  }

  .loader {
    position: relative;
    width: 100%;
    margin-bottom: 1rem;
  }

  .loader-progress {
    width: 100%;
    height: 20vh;
    background-color: $secundario;
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 1rem;
    border-radius: 20rem;
  }

  .loader-progress-bar {
    height: 100%;
    width: 0;
    background: $primario;
    filter: invert(80%);
    border-radius: 3px;
    transition: width 0.3s ease-out;
    animation: progress 3000ms ease-in-out forwards;
  }

  .loader-percentage {
    text-align: center;
    font-size: clamp(1.2rem, 20.5vw, 30vw);
    font-weight: 600;
    color:($primario);
    filter: invert(80%);
    margin-bottom: 0.5rem;
  }

  .loader-text {
    color: $fondo;
    font-size: 1.1rem;
    margin: 0;
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes progress {
    0% { width: 0%; }
    100% { width: 100%; }
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script define:vars={{ duration }}>
  // Elementos del loader
  const progressBar = document.querySelector('.loader-progress-bar');
  const percentageElement = document.querySelector('.loader-percentage');
  const loaderWrapper = document.querySelector('.loader-wrapper');
  
  // Comprobar si la página ya está cargada
  if (document.readyState === 'complete') {
    // Si la página ya está cargada, removemos el loader inmediatamente
    loaderWrapper?.remove();
  } else {
    // Si no está cargada, iniciamos la animación
    if (progressBar && percentageElement && loaderWrapper) {
      let progress = 0;
      const interval = 30; // Update interval in ms
      const increment = (interval / duration) * 100;
      
      const updateProgress = () => {
        if (progress < 100) {
          progress += increment;
          const roundedProgress = Math.min(Math.round(progress), 100);
          percentageElement.textContent = `${roundedProgress}%`;
          progressBar.style.width = `${roundedProgress}%`;
          requestAnimationFrame(updateProgress);
        }
      };
      
      // Iniciar animación
      requestAnimationFrame(updateProgress);

      // Cuando la página termine de cargar, ocultamos el loader
      window.addEventListener('load', () => {
        // Asegurar que llegue al 100%
        progress = 100;
        progressBar.style.width = '100%';
        percentageElement.textContent = '100%';
        
        // Ocultar y remover el loader
        setTimeout(() => {
          loaderWrapper.style.opacity = '0';
          loaderWrapper.style.visibility = 'hidden';
          
          setTimeout(() => {
            loaderWrapper.remove();
          }, 500);
        }, 200); // Pequeña pausa para mostrar el 100%
      });
    }
  }
</script>